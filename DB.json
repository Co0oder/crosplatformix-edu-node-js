{
"s1" : {
        "id" : "1", 
        "title" : "Введення в Node JS", 
        "content" :{
            "p1" : {
            "title": "Що таке Node JS. Початок роботи",
            "text" : "Node.js представляє середовище виконання коду на JavaScript, який побудований на основі двигуна JavaScript Chrome V8, який дозволяє перевести виклики на мові JavaScript в машинний код. Node.js попередньо був призначений для створення серверних додатків на мові JavaScript. Хоча також існують проекти для написання десктопнимих програм (Electron) і навіть для створення програм для мікроконтролерів. Але, перш за все, ми говоримо про Node.js, як про платформу для створення веб-додатків.",
            "image" :"0",
            "code": "0"
            },
            "p2" : {
            "title": "Встановлення",
            "text" : "Для завантаження перейдіть на офіційний сайт https://nodejs.org/uk/. На головній сторінці наявні дві можливі опції для завантаження: сама остання версія NodeJS та LTS-версія.",
            "image" :"https://i.ibb.co/Q8phb0k/Node-install-site.png",
            "code": "0"
            },
            "p3" : {
            "title": "0",
            "text" : "Завантажуємо останню версію. У моєму випадку це версія 13.10.1. Для Windows установочний файл має розширення msi. Після запуску відкриєтся програма встановлення:",
            "image" :"https://i.ibb.co/cyRPHbj/Node-installer.png",
            "code": "0"
            },
            "p4" : {
            "title": "0",
            "text" : "Після успішного встановлення ви зможете ввести в командну строку/термінал команду node -v, і дізнатись поточну версію node.js:",
            "image" :"https://i.ibb.co/DL30qg0/node-v.png",
            "code": "0"
            },
            "p5" : {
                "title": "Інструменти розробника",
                "text" : "Для розробки під Node JS достатньо найпростішоко текстового редактору такого як Notepade++. Так само можна використовувати більш відомих редакторів типу Atom, Sublime, Visual Studio Code, або середовища розробки, які підтримують роботу з Node.JS, наприклад: Visual Studio або WebStorm.",
                "image" :"0",
                "code": "0"
            }
        },
        "image": "img/nodejs-800x800.png",
        "cors" : "Node.js"
    },
"s2" :   {
        "id" : "2",
        "title" : "Перший додаток на Node.js", 
        "content" :{
            "p1" : {
            "title": "Перший додаток на Node.js",
            "text" : "Напишемо Перший простий додаток для NodeJS. Для створення додатків можна використовувати практично всі стандартні конструкції мови JavaScript. Винятком є робота з DOM, так як додаток буде запускатися на сервері, а не в браузері, тому DOM і такі об'єкти як window або document в даному випадку нам будуть недоступні.",
            "image" :"0",
            "code": "0"
            },
            "p2" : {
            "title": "0",
            "text" : "Для цього спочатку створимо для додатка каталог на жорсткому диску. Наприклад, я створив каталог C: \\ node \\ helloapp. У цьому каталозі створимо файл app.js.",
            "image" :"0",
            "code": "0"
            },
            "p3" : {
            "title": "0",
            "text" : "Визначимо в файлі app.js наступний код:",
            "image" :"0",
            "code": "https://gist.github.com/Co0oder/747334ebf5e27c6fa017fbc33b2e408c.js"
            },
            "p4" : {
            "title": "0",
            "text" : "Коротко розберемо код.",
            "image" :"0",
            "code": "0"
            },
            "p5" : {
                "title": "0",
                "text" : "На першому рядку ми отримуємо модуль http, який необхідний для створення сервера. Це вбудований модуль, і для його завантаження необхідно застосувати функцію require ():",
                "image" :"0",
                "code": "https://gist.github.com/Co0oder/a29a8b36c0946879227c7bfd38cbf3e1.js"
            },
            "p6" : {
                "title": "0",
                "text" : "Далі за допомогою методу createServer () створюється новий сервер для прослуховування вхідних підключень і обробки запитів. Як параметр цей метод приймає функцію, яка має два параметри. Перший параметр request зберігає всю інформацію про запит, а другий параметр response використовується для відправки відповіді. В даному випадку відповідь являє просту рядок \"Hello NodeJS!\" і відправляється за допомогою методу response.end ().\nАле метод http.createServer () тільки створює сервер. Щоб сервер почав прослуховувати вхідні підключення у нього треба викликати метод listen:",
                "image" :"0",
                "code": "https://gist.github.com/Co0oder/27d82bc7bb919d5ec5571684f8566614.js"
            },
            "p7" : {
                "title": "0",
                "text" : "Цей метод приймає три параметри. Перший параметр вказує на локальний порт, по якому запускається сервер. Другий параметр вказує на локальну адресу. Тобто в даному випадку сервер буде запускатися за адресою 127.0.0.1 або localhost на порту 3000.",
                "image" :"0",
                "code": "0"
            },
            "p8" : {
                "title": "0",
                "text" : "Третій параметр представляє функцію, яка запускається при початку прослуховування підключень. Тут ця функція просто виводить діагностичне повідомлення на консоль.",
                "image" :"0",
                "code": "0"
            },
            "p9" : {
                "title": "0",
                "text" : "Тепер запустимо сервер. Для цього відкриємо термінал (в OS X або Linux) або командний рядок (в Windows). За допомогою команди cd перейдемо до каталогу програми:",
                "image" :"https://i.ibb.co/30sFDhB/First-Server-Run.png",
                "code": "0"
            }            
        },
        "image": "img/nodejs-800x800.png",
        "cors" : "Node.js"
    },
"s3" : {
    "id" : "3",
    "title" : "Початок роботи з Express", 
    "content" :{
        "p1": {
        "title": "Початок роботи з Express",
        "text": "У цьому розділі ми розглянемо створення сервера за допомогою фреймворка Express. Здавалося б, навіщо нам потрібен додатковий фреймворк, якщо ми можемо скористатися готовим модулем http, який є в Node.js API. Однак Express сам використовує модуль http, але разом з тим надає ряд готових абстракцій, які спрощують створення сервера і серверної логіки, зокрема, обробка відправлених форм, робота з куками, CORS і т.д.",
        "image": "0",
        "code": "0"
        },
        "p2": {
        "title": "0",
        "text": "Вихідний код фреймворка можна подивитися в репозиторії на гітхабе за адресою https://github.com/expressjs/express.",
        "image": "0",
        "code": "0"
        },
        "p3": {
        "title": "0",
        "text" : "Створимо для проекту новий каталог, який назвемо, наприклад, expressapp. Для зберігання інформації про всі залежностях проекту створимо в цьому каталозі новий файл package.json:",
        "image" :"0",
        "code": "https://gist.github.com/673936f4ac10691785bc5f7921f82048.js"
        },
        "p4": {
        "title": "0",
        "text": "Далі перейдемо до цього каталогу в командному рядку / терміналі і для додавання всіх потрібних пакетів виконаємо команду:",
        "image": "0",
        "code": "0"
        },
        "p5": {
        "title": "0",
        "text": "npm install",
        "image": "https://i.ibb.co/g7bZX4q/install.png",
        "code": "0"
        },
        "p6": {
        "title": "0",
        "text": "Створимо в каталозі проекту новий файл app.js:",
        "image": "0",
        "code": "https://gist.github.com/67da5b54993a61092b0a7f0cf87346c3.js"
        },
        "p7": {
        "title": "0",
        "text": "Для використання Express на початку треба створити об'єкт, який буде представляти додаток:",
        "image": "0",
        "code": "https://gist.github.com/7229464e6be9797264aaca485d08954a.js"
        },
        "p8": {
        "title": "0",
        "text": "Для обробки запитів в Express визначено ряд вбудованих функцій, і однією з таких є функція app.get (). Вона обробляє GET-запити протоколу HTTP і дозволяє зв'язати маршрути з певними обработчиками. Для цього першим параметром передається маршрут, а другим - обробник, який буде викликатися, якщо запит до сервера відповідає даному маршруту:",
        "image": "0",
        "code": "https://gist.github.com/e7a0dc5989dd068e132d0d969ef532cb.js"
        },
        "p9": {
        "title": "0",
        "text": "Маршрут \"/\" представляє кореневої маршрут. Для запуску сервера викликається метод app.listen (), в який передається номер порту. Запустимо проект і звернемося в браузері за адресою http: // localhost: 3000 /:",
        "image": "https://i.ibb.co/G5gHBjW/Hi-Express.png",
        "code": "0"
        },
        "p10": {
        "title": "0",
        "text": "І що важливо, Express спирається на систему маршрутів, тому всі інші запити, які не відповідають кореневого маршруту \"/\"  не будуть оброблятися:",
        "image": "https://i.ibb.co/Fq81pJp/Error.png",
        "code": "0"
        },
        "p11": {
        "title": "0",
        "text": "Тепер змінимо файл app.js:",
        "image": "0",
        "code": "https://gist.github.com/52a58a1b1b64eb8e582219fcf14046ad.js"
        },
        "p12": {
        "title": "0",
        "text": "Тепер в додатку визначено три маршрути, які будуть оброблятися сервером",
        "image": "0",
        "code": "0"
        }
    },
    "image": "img/nodejs-800x800.png",
    "cors" : "Node.js"
},

"s4" : {
    "id" : "4",
    "title" : "Про автора", 
    "content" :{
      "p1": {
        "title": "Про автора",
        "text": "0",
        "image": "https://i.ibb.co/sRqFfy6/19931557-475139592824710-3593094447841148928-n-1.jpg",
        "code": "0"
      },
      "p2": {
        "title": "Пугач Б.В.",
        "text": "Автор проекту - Пугач Богдан Васильович, студент Вінницького коледжу Національного університету харчових технологій, група 4-ОК-1",
        "image": "0",
        "code": "0"
      },
    "p3" : {
        "title": "Про сайт",
        "text" : "Сайт створено в процесі роботи на курсовим проектом на тему \"Розробка додатку на мові JS для вивчення розділу \"Розробка кросплатформених додатків на JS\" дисципліни програмування\". Для розробки даного продукту використовувався фреймворк Nod.js",
        "image" :"0",
        "code": "0"
        }
    },
    "image": "img/nodejs-800x800.png",
    "cors" : "Node.js"
}
}